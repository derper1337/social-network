{"ast":null,"code":"import { usersAPI, authAPI } from \"../ api/api\";\nlet initValue = {\n  id: null,\n  email: null,\n  login: null,\n  loggedIn: false\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET-AUTH\":\n      {\n        let stateCopy = { ...state,\n          ...action.loginData,\n          loggedIn: action.loggedIn\n        };\n        return stateCopy;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuth = (loginData, loggedIn) => ({\n  type: \"SET-AUTH\",\n  loginData: loginData,\n  loggedIn: loggedIn\n});\nexport const setAuthThunkCreator = () => {\n  return dispatch => {\n    console.log(\"setAuth\");\n    usersAPI.getAuthMe().then(data => {\n      if (data.resultCode === 0) {\n        let loginData = data.data;\n        dispatch(setAuth(loginData, true));\n      }\n    });\n  };\n};\nexport const loginThunkCreator = (email, password, rememberMe) => {\n  console.log(\"sss\");\n  return dispatch => {\n    console.log(\"1\");\n    authAPI.login(email, password, rememberMe).then(response => {\n      console.log(\"2\");\n      console.log(response);\n\n      if (response.data.resultCode === 0) {\n        //dispatch(setAuthThunkCreator);\n        console.log(response);\n      }\n    });\n  };\n};\nexport const logoutThunkCreator = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setAuth(null, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/Redux/auth-reducer.js"],"names":["usersAPI","authAPI","initValue","id","email","login","loggedIn","authReducer","state","action","type","stateCopy","loginData","setAuth","setAuthThunkCreator","dispatch","console","log","getAuthMe","then","data","resultCode","loginThunkCreator","password","rememberMe","response","logoutThunkCreator","logout"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,OAAlB,QAAgC,aAAhC;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,EAAE,EAAE,IADQ;AAEZC,EAAAA,KAAK,EAAE,IAFK;AAGZC,EAAAA,KAAK,EAAE,IAHK;AAIZC,EAAAA,QAAQ,EAAE;AAJE,CAAhB;;AAMA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBN,SAAsB;AAAA,MAAXO,MAAW;;AAE/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AAAiB;AACb,YAAIC,SAAS,GAAG,EACZ,GAAGH,KADS;AAEZ,aAAGC,MAAM,CAACG,SAFE;AAGZN,UAAAA,QAAQ,EAAEG,MAAM,CAACH;AAHL,SAAhB;AAKA,eAAOK,SAAP;AACH;;AACD;AACI,aAAOH,KAAP;AAVR;AAYH,CAdD;;AAeA,OAAO,MAAMK,OAAO,GAAG,CAACD,SAAD,EAAYN,QAAZ,MAA0B;AAACI,EAAAA,IAAI,EAAE,UAAP;AAAmBE,EAAAA,SAAS,EAAEA,SAA9B;AAAyCN,EAAAA,QAAQ,EAACA;AAAlD,CAA1B,CAAhB;AAEP,OAAO,MAAMQ,mBAAmB,GAAG,MAAK;AACpC,SAAQC,QAAD,IAAa;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAjB,IAAAA,QAAQ,CAACkB,SAAT,GACKC,IADL,CACUC,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,UAAL,KAAoB,CAAxB,EAA2B;AACvB,YAAIT,SAAS,GAAGQ,IAAI,CAACA,IAArB;AACAL,QAAAA,QAAQ,CAACF,OAAO,CAACD,SAAD,EAAY,IAAZ,CAAR,CAAR;AACH;AACJ,KANL;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMU,iBAAiB,GAAG,CAAClB,KAAD,EAAQmB,QAAR,EAAkBC,UAAlB,KAAgC;AAC7DR,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,SAAQF,QAAD,IAAa;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAhB,IAAAA,OAAO,CAACI,KAAR,CAAcD,KAAd,EAAqBmB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUM,QAAQ,IAAG;AAEbT,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;;AACA,UAAIA,QAAQ,CAACL,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/B;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AACH;AACJ,KATL;AAUH,GAZD;AAaH,CAfM;AAgBP,OAAO,MAAMC,kBAAkB,GAAG,MAAK;AACnC,SAAQX,QAAD,IAAa;AAChBd,IAAAA,OAAO,CAAC0B,MAAR,GACKR,IADL,CACUM,QAAQ,IAAG;AACb,UAAIA,QAAQ,CAACL,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/BN,QAAAA,QAAQ,CAACF,OAAO,CAAC,IAAD,EAAO,KAAP,CAAR,CAAR;AACH;AACJ,KALL;AAMH,GAPD;AAQH,CATM;AAWP,eAAeN,WAAf","sourcesContent":["import {usersAPI, authAPI} from \"../ api/api\";\r\n\r\nlet initValue = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    loggedIn: false,\r\n};\r\nconst authReducer = (state = initValue, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-AUTH\": {\r\n            let stateCopy = {\r\n                ...state,\r\n                ...action.loginData,\r\n                loggedIn: action.loggedIn,\r\n            }\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setAuth = (loginData, loggedIn) => ({type: \"SET-AUTH\", loginData: loginData, loggedIn:loggedIn});\r\n\r\nexport const setAuthThunkCreator = () =>{\r\n    return (dispatch) =>{\r\n        console.log(\"setAuth\");\r\n        usersAPI.getAuthMe()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let loginData = data.data;\r\n                    dispatch(setAuth(loginData, true));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginThunkCreator = (email, password, rememberMe) =>{\r\n    console.log(\"sss\")\r\n    return (dispatch) =>{\r\n        console.log(\"1\");\r\n        authAPI.login(email, password, rememberMe)\r\n            .then(response =>{\r\n\r\n                console.log(\"2\");\r\n                console.log(response);\r\n                if (response.data.resultCode === 0){\r\n                    //dispatch(setAuthThunkCreator);\r\n                    console.log(response);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const logoutThunkCreator = () =>{\r\n    return (dispatch) =>{\r\n        authAPI.logout()\r\n            .then(response =>{\r\n                if (response.data.resultCode === 0){\r\n                    dispatch(setAuth(null, false));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}
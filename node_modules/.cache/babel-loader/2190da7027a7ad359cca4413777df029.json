{"ast":null,"code":"import { profileAPI, usersAPI } from \"../ api/api\";\nlet initValue = {\n  posts: [{\n    id: \"1\",\n    likesCount: 3,\n    text: \"Hi! Unfortunately, current version of API doesn't support post creation on the server side, but you can add them localy, in your profile page!\"\n  }],\n  newPostText: {\n    id: \"5\",\n    likesCount: 0,\n    text: \"\"\n  },\n  profile: null,\n  status: null\n};\n\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD-POST\":\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.posts = [...state.posts];\n        stateCopy.posts.push(Object.assign({}, state.newPostText));\n        stateCopy.newPostText.text = '';\n        return stateCopy;\n      }\n\n    case \"CHANGE-POST\":\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.newPostText.text = action.text;\n        return stateCopy;\n      }\n\n    case \"SET-USER-PROFILE\":\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case \"SET-USER-STATUS\":\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case \"SET-USER-AVATAR\":\n      {\n        return { ...state,\n          photos: action.photos\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPost = () => ({\n  type: \"ADD-POST\"\n});\nexport const textareaChange = text => ({\n  type: \"CHANGE-POST\",\n  text: text.current.value\n});\nexport const setUserProfile = profile => ({\n  type: \"SET-USER-PROFILE\",\n  profile: profile\n});\nexport const setProfileStatus = status => ({\n  type: \"SET-USER-STATUS\",\n  status: status\n});\nexport const setUserAvatar = photos => ({\n  type: \"SET-USER-AVATAR\",\n  photos: photos\n});\nexport const getProfileThunkCreator = userId => {\n  return dispatch => {\n    usersAPI.getProfile(userId).then(data => {\n      dispatch(setUserProfile(data));\n    });\n  };\n};\nexport const getStatusThunkCreator = userId => {\n  return dispatch => {\n    if (userId == \"\") {\n      userId = 2;\n    }\n\n    profileAPI.getStatus(userId).then(response => {\n      dispatch(setProfileStatus(response.data));\n    });\n  };\n};\nexport const updateStatusThunkCreator = status => {\n  return dispatch => {\n    profileAPI.updateStatus(status).then(response => {\n      console.log(response);\n      dispatch(setProfileStatus(status));\n    });\n  };\n};\nexport const updateProfileThunkCreator = profile => {\n  return dispatch => {\n    profileAPI.updateProfile(profile).then(response => {\n      dispatch(setUserProfile(profile));\n    });\n  };\n};\nexport const updateAvatarThunkCreator = avatar => {\n  return dispatch => {\n    profileAPI.updateAvatar(avatar).then(response => {\n      dispatch(setUserAvatar(null));\n      dispatch(setUserAvatar(response.data.data.photos));\n    });\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/Redux/profileReducer.js"],"names":["profileAPI","usersAPI","initValue","posts","id","likesCount","text","newPostText","profile","status","profileReducer","state","action","type","stateCopy","push","Object","assign","photos","addPost","textareaChange","current","value","setUserProfile","setProfileStatus","setUserAvatar","getProfileThunkCreator","userId","dispatch","getProfile","then","data","getStatusThunkCreator","getStatus","response","updateStatusThunkCreator","updateStatus","console","log","updateProfileThunkCreator","updateProfile","updateAvatarThunkCreator","avatar","updateAvatar"],"mappings":"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","sourcesContent":["import {profileAPI, usersAPI} from \"../ api/api\";\r\n\r\nlet initValue = {\r\n    posts: [\r\n        {id: \"1\", likesCount: 3, text: \"Hi! Unfortunately, current version of API doesn't support post creation on the server side, but you can add them localy, in your profile page!\"},\r\n    ],\r\n    newPostText: {id: \"5\", likesCount: 0, text: \"\"},\r\n    profile: null,\r\n    status: null,\r\n};\r\nconst profileReducer = (state = initValue, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts]\r\n            stateCopy.posts.push(Object.assign({}, state.newPostText));\r\n            stateCopy.newPostText.text = '';\r\n            return stateCopy;}\r\n        case \"CHANGE-POST\": {\r\n            let stateCopy = {...state};\r\n            stateCopy.newPostText.text = action.text;\r\n            return stateCopy;\r\n        }\r\n        case \"SET-USER-PROFILE\":{\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"SET-USER-STATUS\":{\r\n            return {...state, status: action.status}\r\n        }\r\n        case \"SET-USER-AVATAR\":{\r\n            return {...state, photos: action.photos}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const addPost = () => ({type: \"ADD-POST\"});\r\nexport const textareaChange = (text) => ({type: \"CHANGE-POST\",text: text.current.value});\r\nexport const setUserProfile = (profile) => ({type:\"SET-USER-PROFILE\", profile:profile});\r\nexport const setProfileStatus = (status) => ({type:\"SET-USER-STATUS\", status:status})\r\nexport const setUserAvatar = (photos) => ({type:\"SET-USER-AVATAR\", photos:photos})\r\n\r\nexport const getProfileThunkCreator = (userId) => {\r\n    return (dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(data => {\r\n                dispatch(setUserProfile(data));\r\n            })\r\n    }\r\n}\r\n\r\nexport const getStatusThunkCreator = (userId) => {\r\n    return (dispatch) => {\r\n        if(userId==\"\"){\r\n            userId=2;\r\n        }\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                dispatch(setProfileStatus(response.data));\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status) => {\r\n    return (dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                console.log(response);\r\n                dispatch(setProfileStatus(status));\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateProfileThunkCreator = (profile) => {\r\n    return (dispatch) => {\r\n        profileAPI.updateProfile(profile)\r\n            .then(response => {\r\n                dispatch(setUserProfile(profile));\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateAvatarThunkCreator = (avatar) => {\r\n    return (dispatch) => {\r\n        profileAPI.updateAvatar(avatar)\r\n            .then(response => {\r\n                dispatch(setUserAvatar(null));\r\n                dispatch(setUserAvatar(response.data.data.photos));\r\n            })\r\n    }\r\n}\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}
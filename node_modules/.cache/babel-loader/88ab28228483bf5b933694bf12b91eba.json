{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philippos\\\\Documents\\\\WebDev\\\\ULTRA_REACT\\\\01\\\\src\\\\components\\\\Login\\\\Login.js\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { connect } from \"react-redux\";\nimport { loginThunkCreator } from \"../../Redux/auth-reducer\";\nimport { Navigate } from \"react-router-dom\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet mapStateToProps = state => {\n  return {\n    isAuth: state.auth.loggedIn\n  };\n};\n\nconst Login = props => {\n  const initialValues = {\n    email: 'oxotnik3010@gmail.com',\n    password: 'asnaebos'\n  };\n\n  const validate = values => {\n    let errors = {};\n\n    if (!values.email) {\n      errors.email = \"Required field\";\n    }\n\n    if (!values.password) {\n      errors.password = \"Required field\";\n    }\n\n    return errors;\n  };\n\n  const onSubmit = (values, _ref) => {\n    let {\n      setStatus\n    } = _ref;\n    console.log(setStatus);\n    props.loginThunkCreator(values.email, values.password, values.rememberMe);\n  };\n\n  if (props.isAuth) return /*#__PURE__*/_jsxDEV(Navigate, {\n    replace: true,\n    to: \"/profile\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 30\n  }, this);else return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = \"Invalid email address\";\n      }\n\n      return errors;\n    },\n    onSubmit: (values, _ref2) => {\n      let {\n        setSubmitting,\n        setStatus\n      } = _ref2;\n      setStatus();\n      setTimeout(() => {\n        console.log(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n        setStatus(\"success\");\n      }, 1000);\n    },\n    children: _ref3 => {\n      let {\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [status, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          onChange: handleChange,\n          onBlur: handleBlur,\n          value: values.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), errors.email && touched.email && errors.email, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          onChange: handleChange,\n          onBlur: handleBlur,\n          value: values.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), errors.password && touched.password && errors.password, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this); // <div>\n  //\n  //     <Formik onSubmit={onSubmit} initialValues={initialValues} validate={validate}>\n  //     <Form>\n  //         <label htmlFor={'email'}>Email</label>\n  //         <br/>\n  //         <Field type={'email'} id={'email'} name={'email'}/>\n  //         <ErrorMessage name={\"email\"}/>\n  //         <br/>\n  //\n  //         <label htmlFor={'password'}>Password</label>\n  //         <br/>\n  //         <Field type={'password'} id={'password'} name={'password'}/>\n  //         <ErrorMessage name={\"password\"}/>\n  //         <br/>\n  //         <button type='submit'> Submit</button>\n  //     </Form>\n  //     </Formik>\n  // </div>\n};\n\n_c = Login;\nexport default connect(mapStateToProps, {\n  loginThunkCreator\n})(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/components/Login/Login.js"],"names":["ErrorMessage","Formik","Form","Field","connect","loginThunkCreator","Navigate","React","mapStateToProps","state","isAuth","auth","loggedIn","Login","props","initialValues","email","password","validate","values","errors","onSubmit","setStatus","console","log","rememberMe","test","setSubmitting","setTimeout","JSON","stringify","touched","handleChange","handleBlur","handleSubmit","isSubmitting","status"],"mappings":"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","sourcesContent":["import {ErrorMessage, Formik, Form, Field} from \"formik\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginThunkCreator} from \"../../Redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.loggedIn,\r\n    }\r\n}\r\n\r\nconst Login = (props) => {\r\n\r\n    const initialValues = {\r\n        email: 'oxotnik3010@gmail.com',\r\n        password: 'asnaebos',\r\n    }\r\n    const validate = (values) => {\r\n        let errors = {};\r\n        if (!values.email) {\r\n            errors.email = \"Required field\";\r\n        }\r\n        if (!values.password) {\r\n            errors.password = \"Required field\";\r\n        }\r\n        return errors;\r\n    }\r\n    const onSubmit = (values, {setStatus}) =>{\r\n        console.log(setStatus);\r\n        props.loginThunkCreator(values.email, values.password, values.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) return <Navigate replace to=\"/profile\"/>\r\n    else return (\r\n        <Formik\r\n            initialValues={{email: \"\", password: \"\"}}\r\n            validate={(values) => {\r\n                const errors = {};\r\n                if (!values.email) {\r\n                    errors.email = \"Required\";\r\n                } else if (\r\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                ) {\r\n                    errors.email = \"Invalid email address\";\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, {setSubmitting, setStatus}) => {\r\n                setStatus();\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    setSubmitting(false);\r\n                    setStatus(\"success\");\r\n                }, 1000);\r\n            }}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  status\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    {status}\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                    />\r\n                    {errors.email && touched.email && errors.email}\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                    />\r\n                    {errors.password && touched.password && errors.password}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n\r\n\r\n\r\n\r\n    // <div>\r\n    //\r\n    //     <Formik onSubmit={onSubmit} initialValues={initialValues} validate={validate}>\r\n    //     <Form>\r\n    //         <label htmlFor={'email'}>Email</label>\r\n    //         <br/>\r\n    //         <Field type={'email'} id={'email'} name={'email'}/>\r\n    //         <ErrorMessage name={\"email\"}/>\r\n    //         <br/>\r\n    //\r\n    //         <label htmlFor={'password'}>Password</label>\r\n    //         <br/>\r\n    //         <Field type={'password'} id={'password'} name={'password'}/>\r\n    //         <ErrorMessage name={\"password\"}/>\r\n    //         <br/>\r\n    //         <button type='submit'> Submit</button>\r\n    //     </Form>\r\n    //     </Formik>\r\n    // </div>\r\n};\r\n\r\nexport default connect(mapStateToProps, {loginThunkCreator})(Login);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philippos\\\\Documents\\\\WebDev\\\\ULTRA_REACT\\\\01\\\\src\\\\components\\\\Content\\\\Profile\\\\Profile.js\",\n    _s = $RefreshSig$();\n\nimport css from \"./Profile.module.css\";\nimport React, { PureComponent, useEffect, useState } from \"react\";\nimport Preloader from \"../../common/preloader/preloader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.Post,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n};\n\n_c = Post;\n\nclass ProfileStatus extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      editMode: false,\n      status: this.props.status\n    };\n\n    this.onStatusChange = e => {\n      this.setState({\n        status: e.currentTarget.value\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.status !== this.props.status) {\n      this.setState({\n        status: this.props.status\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", this.state.editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.onStatusChange,\n          value: this.state.status,\n          onBlur: () => {\n            this.setState({\n              editMode: false\n            });\n            this.props.updateStatus(this.state.status);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            this.setState({\n              editMode: true\n            });\n          },\n          children: this.props.status || \"no status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst Profile = props => {\n  _s();\n\n  const ProfileComponent = (componentName, onComponentChange) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css[\"componentName\"],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [componentName, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  };\n\n  let postElements = props.ProfileData.posts.map(p => /*#__PURE__*/_jsxDEV(Post, {\n    text: p.text\n  }, p.text, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 57\n  }, this));\n  let text = /*#__PURE__*/React.createRef();\n  const [editMode, setEditMode] = useState(false);\n  const [localProfile, setLocalProfile] = useState({});\n  useEffect(() => {\n    setLocalProfile({ ...props.ProfileData.profile\n    });\n  }, [props.ProfileData.profile]);\n\n  if (!props.ProfileData.profile) {\n    return /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.Profile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.Name,\n      children: props.ProfileData.profile.fullName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.AboutMe,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"About me:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: event => {\n          setLocalProfile({ ...localProfile,\n            aboutMe: event.currentTarget.value\n          });\n        },\n        type: \"text\",\n        value: localProfile.aboutMe || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: localProfile.aboutMe ? localProfile.aboutMe : \"no info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ProfileComponent, {\n      componentName: \"aboutMe\",\n      onComponentChange: event => {\n        setLocalProfile({ ...localProfile,\n          aboutMe: event.currentTarget.value\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.LookingForAJob,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"inline\"\n        },\n        children: \"Looking for a Job:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: () => {\n          setLocalProfile({ ...localProfile,\n            lookingForAJob: !localProfile.lookingForAJob\n          });\n        },\n        type: \"checkbox\",\n        checked: localProfile.lookingForAJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"inline\"\n        },\n        children: localProfile.lookingForAJob ? \"yes\" : \"no\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setEditMode(!editMode);\n        console.log(localProfile);\n      },\n      children: [\" \", editMode ? \"submit changes\" : \"change profile info\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 13\n  }, this); // return (\n  //     <div className={css.Profile}>\n  //         <div className={css.ProfileName}>{props.ProfileData.profile.fullName}</div>\n  //         <img className={css.ProfilePicture}\n  //              src={props.ProfileData.profile.photos.large}/>\n  //         <br/>\n  //         <div>\n  //             {props.isOwner && <input type={\"file\"}/>}\n  //         </div>\n  //         <ProfileStatus status={props.ProfileData.status} updateStatus={props.updateStatus}/>\n  //         <br/>\n  //         <textarea onChange={() => props.textareaChange(text)}\n  //                   ref={text}\n  //                   value={props.ProfileData.newPostText.text}>\n  //         </textarea>\n  //         <br/>\n  //         <button onClick={() => {\n  //             props.addPost();\n  //         }}>Add new post\n  //         </button>\n  //         <br/>\n  //         <div className={css.MyPosts}>\n  //             {postElements}\n  //         </div>\n  //     </div>);\n};\n\n_s(Profile, \"9ibWErgunSd2rsZy9AaQ97z1J+k=\");\n\n_c2 = Profile;\nexport default Profile;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Profile\");","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/components/Content/Profile/Profile.js"],"names":["css","React","PureComponent","useEffect","useState","Preloader","Post","props","text","ProfileStatus","state","editMode","status","onStatusChange","e","setState","currentTarget","value","componentDidUpdate","prevProps","prevState","render","updateStatus","Profile","ProfileComponent","componentName","onComponentChange","postElements","ProfileData","posts","map","p","createRef","setEditMode","localProfile","setLocalProfile","profile","Name","fullName","AboutMe","event","aboutMe","LookingForAJob","display","lookingForAJob","console","log"],"mappings":"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","sourcesContent":["import css from \"./Profile.module.css\"\r\nimport React, {PureComponent, useEffect, useState} from \"react\";\r\nimport Preloader from \"../../common/preloader/preloader\";\r\n\r\nconst Post = (props) => {\r\n    return <div className={css.Post}>\r\n        {props.text}\r\n    </div>\r\n}\r\n\r\nclass ProfileStatus extends PureComponent {\r\n    state = {\r\n        editMode: false, status: this.props.status,\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <div> {this.state.editMode ? <input onChange={this.onStatusChange} value={this.state.status} onBlur={() => {\r\n                this.setState({editMode: false});\r\n                this.props.updateStatus(this.state.status);\r\n            }}/> : <div onClick={() => {\r\n                this.setState({editMode: true});\r\n            }}>{this.props.status || \"no status\"}</ div>}\r\n            </div>\r\n\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst Profile = (props) => {\r\n\r\n    const ProfileComponent = (componentName, onComponentChange) =>{\r\n        return(\r\n            <div className={css[\"componentName\"]}>\r\n                <div>{componentName}:</div>\r\n                {/*{editMode*/}\r\n                {/*    ? <input onChange={onComponentChange} type={\"text\"} value={localProfile[\"componentName\"] || \"\"}/>*/}\r\n                {/*    : <div>{localProfile[\"componentName\"] ? localProfile[\"componentName\"] : \"no info\"}</div>}*/}\r\n            </div>)\r\n    }\r\n\r\n    let postElements = props.ProfileData.posts.map(p => <Post text={p.text} key={p.text}/>);\r\n    let text = React.createRef();\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [localProfile, setLocalProfile] = useState({});\r\n    useEffect(() => {\r\n        setLocalProfile({...props.ProfileData.profile});\r\n    }, [props.ProfileData.profile])\r\n\r\n\r\n    if (!props.ProfileData.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (<div className={css.Profile}>\r\n        <div className={css.Name}>{props.ProfileData.profile.fullName}</div>\r\n\r\n        <div className={css.AboutMe}>\r\n            <div>About me:</div>\r\n            {editMode\r\n                ? <input onChange={(event) => {setLocalProfile({...localProfile, aboutMe: event.currentTarget.value})}} type={\"text\"} value={localProfile.aboutMe || \"\"}/>\r\n                : <div>{localProfile.aboutMe ? localProfile.aboutMe : \"no info\"}</div>}\r\n        </div>\r\n\r\n        <ProfileComponent componentName={\"aboutMe\"} onComponentChange={(event) => {setLocalProfile({...localProfile, aboutMe: event.currentTarget.value})}}/>\r\n\r\n        <div className={css.LookingForAJob}>\r\n            <div style={{display:\"inline\"}}>Looking for a Job:</div>\r\n            {editMode\r\n                ? <input onChange={() => {setLocalProfile({...localProfile, lookingForAJob: !localProfile.lookingForAJob})}} type={\"checkbox\"} checked={localProfile.lookingForAJob}/>\r\n                : <div style={{display:\"inline\"}}>{localProfile.lookingForAJob ? \"yes\":\"no\"}</div>}\r\n        </div>\r\n\r\n        <button onClick={() => {\r\n            setEditMode(!editMode);\r\n            console.log(localProfile);\r\n        }}> {editMode ? \"submit changes\" : \"change profile info\"} </button>\r\n    </div>);\r\n    // return (\r\n    //     <div className={css.Profile}>\r\n    //         <div className={css.ProfileName}>{props.ProfileData.profile.fullName}</div>\r\n    //         <img className={css.ProfilePicture}\r\n    //              src={props.ProfileData.profile.photos.large}/>\r\n    //         <br/>\r\n    //         <div>\r\n    //             {props.isOwner && <input type={\"file\"}/>}\r\n    //         </div>\r\n    //         <ProfileStatus status={props.ProfileData.status} updateStatus={props.updateStatus}/>\r\n    //         <br/>\r\n    //         <textarea onChange={() => props.textareaChange(text)}\r\n    //                   ref={text}\r\n    //                   value={props.ProfileData.newPostText.text}>\r\n    //         </textarea>\r\n    //         <br/>\r\n    //         <button onClick={() => {\r\n    //             props.addPost();\r\n    //         }}>Add new post\r\n    //         </button>\r\n    //         <br/>\r\n    //         <div className={css.MyPosts}>\r\n    //             {postElements}\r\n    //         </div>\r\n    //     </div>);\r\n}\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}
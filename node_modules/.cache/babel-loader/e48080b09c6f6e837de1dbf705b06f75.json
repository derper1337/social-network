{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Philippos\\\\Documents\\\\WebDev\\\\ULTRA_REACT\\\\01\\\\src\\\\components\\\\Content\\\\Messages\\\\MessageContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Messages from \"./Messages\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../../HOCs/WIthAuthRedirect\";\nimport { compose } from \"redux\";\nimport { usersAPI } from \"../../../ api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet mapStateToProps = state => {\n  return {\n    messageData: state.messageData,\n    login: state.auth.login\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    addMessage() {\n      dispatch({\n        type: \"ADD-MESSAGE\"\n      });\n    },\n\n    textareaChange(text) {\n      dispatch({\n        type: \"CHANGE-MESSAGE\",\n        text: text.current.value\n      });\n    },\n\n    getFriends() {\n      usersAPI.getFriends().then(data => {\n        dispatch({\n          type: \"SET-FRIENDS\",\n          friends: data.items\n        });\n        dispatch({\n          type: \"SET-DIALOGS\"\n        });\n      });\n    },\n\n    setActiveDialog(dialogName) {\n      dispatch({\n        type: \"SET-ACTIVE-DIALOG\",\n        dialogName: dialogName\n      });\n    }\n\n  };\n};\n\nlet MessageAPI = props => {\n  _s();\n\n  useEffect(() => {\n    props.getFriends();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Messages, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n};\n\n_s(MessageAPI, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MessageAPI;\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(MessageAPI);\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageAPI\");","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/components/Content/Messages/MessageContainer.js"],"names":["React","useEffect","Messages","connect","withAuthRedirect","compose","usersAPI","mapStateToProps","state","messageData","login","auth","mapDispatchToProps","dispatch","addMessage","type","textareaChange","text","current","value","getFriends","then","data","friends","items","setActiveDialog","dialogName","MessageAPI","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,gBAAR,QAA+B,gCAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,QAAR,QAAuB,mBAAvB;;;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADhB;AAEHC,IAAAA,KAAK,EAACF,KAAK,CAACG,IAAN,CAAWD;AAFd,GAAP;AAIH,CALD;;AAMA,IAAIE,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACHC,IAAAA,UAAU,GAAG;AACTD,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACH,KAHE;;AAIHC,IAAAA,cAAc,CAACC,IAAD,EAAO;AACjBJ,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE,gBAAP;AAAyBE,QAAAA,IAAI,EAAEA,IAAI,CAACC,OAAL,CAAaC;AAA5C,OAAD,CAAR;AACH,KANE;;AAOHC,IAAAA,UAAU,GAAG;AACTd,MAAAA,QAAQ,CAACc,UAAT,GAAsBC,IAAtB,CAA2BC,IAAI,IAAI;AAC/BT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,aAAP;AAAsBQ,UAAAA,OAAO,EAAED,IAAI,CAACE;AAApC,SAAD,CAAR;AACAX,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAR;AACH,OAHD;AAIH,KAZE;;AAaHU,IAAAA,eAAe,CAACC,UAAD,EAAY;AACzBb,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,mBAAN;AAA2BW,QAAAA,UAAU,EAACA;AAAtC,OAAD,CAAR;AACD;;AAfE,GAAP;AAiBH,CAlBD;;AAoBA,IAAIC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AACxB3B,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,KAAK,CAACR,UAAN;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO,QAAC,QAAD,OAAcQ;AAAd;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CALD;;GAAID,U;;KAAAA,U;AAQJ,eAAetB,OAAO,CAClBF,OAAO,CAACI,eAAD,EAAkBK,kBAAlB,CADW,EAElBR,gBAFkB,CAAP,CAGbuB,UAHa,CAAf","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../HOCs/WIthAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {usersAPI} from \"../../../ api/api\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messageData: state.messageData,\r\n        login:state.auth.login,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage() {\r\n            dispatch({type: \"ADD-MESSAGE\"});\r\n        },\r\n        textareaChange(text) {\r\n            dispatch({type: \"CHANGE-MESSAGE\", text: text.current.value});\r\n        },\r\n        getFriends() {\r\n            usersAPI.getFriends().then(data => {\r\n                dispatch({type: \"SET-FRIENDS\", friends: data.items});\r\n                dispatch({type: \"SET-DIALOGS\"})\r\n            });\r\n        },\r\n        setActiveDialog(dialogName){\r\n          dispatch({type:\"SET-ACTIVE-DIALOG\", dialogName:dialogName})\r\n        }\r\n    }\r\n}\r\n\r\nlet MessageAPI = (props) => {\r\n    useEffect(() => {\r\n        props.getFriends()\r\n    }, [])\r\n    return <Messages {...props}/>\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(MessageAPI);"]},"metadata":{},"sourceType":"module"}
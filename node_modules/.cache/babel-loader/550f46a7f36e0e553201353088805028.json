{"ast":null,"code":"let initValue = {\n  messageData: {\n    dialogs: [{\n      name: \"stepa\",\n      messages: [{\n        name: \"user1\",\n        message: \"sup brah\"\n      }, {\n        name: \"user1\",\n        message: \"sup brahh\"\n      }, {\n        name: \"user1\",\n        message: \"sup brahhhh\"\n      }, {\n        name: \"user1\",\n        message: \"sup brahhhhhhhhh\"\n      }]\n    }, {\n      name: \"pasha\",\n      messages: [{\n        name: \"user1\",\n        message: \"supes brahes\"\n      }, {\n        name: \"user1\",\n        message: \"sup brah\"\n      }, {\n        name: \"user1\",\n        message: \"sup brah\"\n      }, {\n        name: \"user1\",\n        message: \"sup brah\"\n      }]\n    }, {\n      name: \"sanya\",\n      messages: [{\n        name: \"user1\",\n        message: \"sup brah\"\n      }, {\n        name: \"user1\",\n        message: \"sup brah\"\n      }, {\n        name: \"user1\",\n        message: \"sup brah\"\n      }, {\n        name: \"user1\",\n        message: \"sup brah\"\n      }]\n    }],\n    newMessageText: {\n      name: \"user1\",\n      message: \"shieeeet\"\n    }\n  }\n};\n\nconst messageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  let addMessage = () => {\n    state.dialogs[0].messages.push(Object.assign({}, state.newMessageText));\n  };\n\n  let messageTextChange = newText => {\n    state.newMessageText.message = newText;\n  };\n\n  switch (action.type) {\n    case \"ADD-MESSAGE\":\n      addMessage();\n      break;\n\n    case \"CHANGE-MESSAGE\":\n      messageTextChange(action.text);\n      break;\n\n    default:\n      console.log(\"unexpected action value, current value: \" + action.type);\n      break;\n  }\n\n  return state;\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/Redux/message-reducer.js"],"names":["initValue","messageData","dialogs","name","messages","message","newMessageText","messageReducer","state","action","addMessage","push","Object","assign","messageTextChange","newText","type","text","console","log"],"mappings":"AAAA,IAAIA,SAAS,GAAG;AAACC,EAAAA,WAAW,EAAE;AAC1BC,IAAAA,OAAO,EAAE,CACL;AACIC,MAAAA,IAAI,EAAE,OADV;AAEIC,MAAAA,QAAQ,EAAE,CACN;AAACD,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OADM,EAEN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAFM,EAGN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAHM,EAIN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAJM;AAFd,KADK,EASL;AACIF,MAAAA,IAAI,EAAE,OADV;AAEIC,MAAAA,QAAQ,EAAE,CACN;AAACD,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OADM,EAEN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAFM,EAGN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAHM,EAIN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAJM;AAFd,KATK,EAkBL;AACIF,MAAAA,IAAI,EAAE,OADV;AAEIC,MAAAA,QAAQ,EAAE,CACN;AAACD,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OADM,EAEN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAFM,EAGN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAHM,EAIN;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAE;AAAzB,OAJM;AAFd,KAlBK,CADiB;AA4BtBC,IAAAA,cAAc,EAAE;AAACH,MAAAA,IAAI,EAAE,OAAP;AAAgBE,MAAAA,OAAO,EAAE;AAAzB;AA5BM;AAAd,CAAhB;;AA8BA,MAAME,cAAc,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBR,SAAsB;AAAA,MAAXS,MAAW;;AAElD,MAAIC,UAAU,GAAG,MAAM;AACnBF,IAAAA,KAAK,CAACN,OAAN,CAAc,CAAd,EAAiBE,QAAjB,CAA0BO,IAA1B,CAA+BC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAK,CAACF,cAAxB,CAA/B;AACH,GAFD;;AAGA,MAAIQ,iBAAiB,GAAIC,OAAD,IAAa;AACjCP,IAAAA,KAAK,CAACF,cAAN,CAAqBD,OAArB,GAA+BU,OAA/B;AACH,GAFD;;AAIA,UAAQN,MAAM,CAACO,IAAf;AACI,SAAK,aAAL;AACIN,MAAAA,UAAU;AACV;;AACJ,SAAK,gBAAL;AACII,MAAAA,iBAAiB,CAACL,MAAM,CAACQ,IAAR,CAAjB;AACA;;AACJ;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAA6CV,MAAM,CAACO,IAAhE;AACA;AATR;;AAYA,SAAOR,KAAP;AACH,CAtBD;;AAwBA,eAAeD,cAAf","sourcesContent":["let initValue = {messageData: {\r\n    dialogs: [\r\n        {\r\n            name: \"stepa\",\r\n            messages: [\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brahh\"},\r\n                {name: \"user1\", message: \"sup brahhhh\"},\r\n                {name: \"user1\", message: \"sup brahhhhhhhhh\"}]\r\n        },\r\n        {\r\n            name: \"pasha\",\r\n            messages: [\r\n                {name: \"user1\", message: \"supes brahes\"},\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brah\"}\r\n            ]\r\n        },\r\n        {\r\n            name: \"sanya\",\r\n            messages: [\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brah\"}]\r\n        }\r\n    ],\r\n        newMessageText: {name: \"user1\", message: \"shieeeet\"},\r\n}};\r\nconst messageReducer = (state = initValue, action) => {\r\n\r\n    let addMessage = () => {\r\n        state.dialogs[0].messages.push(Object.assign({}, state.newMessageText));\r\n    };\r\n    let messageTextChange = (newText) => {\r\n        state.newMessageText.message = newText;\r\n    };\r\n\r\n    switch (action.type) {\r\n        case \"ADD-MESSAGE\":\r\n            addMessage();\r\n            break;\r\n        case \"CHANGE-MESSAGE\":\r\n            messageTextChange(action.text);\r\n            break;\r\n        default:\r\n            console.log(\"unexpected action value, current value: \" + action.type);\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default messageReducer;"]},"metadata":{},"sourceType":"module"}
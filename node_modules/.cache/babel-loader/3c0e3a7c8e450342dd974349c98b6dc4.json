{"ast":null,"code":"import { usersAPI } from \"../ api/api\";\nimport { isLoading, setCurrentPage, setUsers } from \"./users-reducer\";\nlet initValue = {\n  dialogs: [{\n    id: \"stepa\",\n    messages: [{\n      name: \"user1\",\n      message: \"sup brah\"\n    }, {\n      name: \"user1\",\n      message: \"sup brahh\"\n    }, {\n      name: \"user1\",\n      message: \"sup brahhhh\"\n    }, {\n      name: \"user1\",\n      message: \"sup brahhhhhhhhh\"\n    }]\n  }],\n  newMessageText: {\n    name: \"user1\",\n    message: \"shieeeet\"\n  },\n  friends: [],\n  dialogs2: []\n};\n\nconst messageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD-MESSAGE\":\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.dialogs = [...state.dialogs];\n        stateCopy.newMessageText = { ...state.newMessageText\n        };\n        stateCopy.dialogs[0].messages.push(Object.assign({}, stateCopy.newMessageText));\n        stateCopy.newMessageText.message = \"\";\n        return stateCopy;\n      }\n\n    case \"CHANGE-MESSAGE\":\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.dialogs = [...state.dialogs];\n        stateCopy.newMessageText = { ...state.newMessageText\n        };\n        stateCopy.newMessageText.message = action.text;\n        return stateCopy;\n      }\n\n    case \"SET-FRIENDS\":\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.friends = action.friends;\n        return stateCopy;\n      }\n\n    case \"SET-DIALOGS\":\n      {\n        debugger;\n        let stateCopy = { ...state\n        };\n        stateCopy.dialogs2 = stateCopy.friends.map(f => f);\n        return stateCopy;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst setFriends = friends => ({\n  type: \"SET-FRIENDS\",\n  friends: friends\n}); // export const getFriendsThunkCreator = () => {\n//     return (dispatch) => {\n//         usersAPI.getFriends().then(data => {\n//             dispatch({type: \"SET-FRIENDS\", friends: data.items});\n//             dispatch({type: \"SET-DIALOGS\"});\n//         });\n//     }\n// }\n\n\nexport default messageReducer;","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/Redux/message-reducer.js"],"names":["usersAPI","isLoading","setCurrentPage","setUsers","initValue","dialogs","id","messages","name","message","newMessageText","friends","dialogs2","messageReducer","state","action","type","stateCopy","push","Object","assign","text","map","f","setFriends"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,aAAvB;AACA,SAAQC,SAAR,EAAmBC,cAAnB,EAAmCC,QAAnC,QAAkD,iBAAlD;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,OAAO,EAAE,CACL;AAAIC,IAAAA,EAAE,EAAE,OAAR;AACIC,IAAAA,QAAQ,EAAE,CACN;AAACC,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KADM,EAEN;AAACD,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAFM,EAGN;AAACD,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAHM,EAIN;AAACD,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAJM;AADd,GADK,CADG;AAUZC,EAAAA,cAAc,EAAE;AAACF,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAVJ;AAWZE,EAAAA,OAAO,EAAE,EAXG;AAYZC,EAAAA,QAAQ,EAAC;AAZG,CAAhB;;AAcA,MAAMC,cAAc,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBV,SAAsB;AAAA,MAAXW,MAAW;;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AAAoB;AAChB,YAAIC,SAAS,GAAG,EAAC,GAAGH;AAAJ,SAAhB;AACAG,QAAAA,SAAS,CAACZ,OAAV,GAAoB,CAAC,GAAGS,KAAK,CAACT,OAAV,CAApB;AACAY,QAAAA,SAAS,CAACP,cAAV,GAA2B,EAAC,GAAGI,KAAK,CAACJ;AAAV,SAA3B;AACAO,QAAAA,SAAS,CAACZ,OAAV,CAAkB,CAAlB,EAAqBE,QAArB,CAA8BW,IAA9B,CAAmCC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,SAAS,CAACP,cAA5B,CAAnC;AACAO,QAAAA,SAAS,CAACP,cAAV,CAAyBD,OAAzB,GAAmC,EAAnC;AACA,eAAOQ,SAAP;AACH;;AACD,SAAK,gBAAL;AAAuB;AACnB,YAAIA,SAAS,GAAG,EAAC,GAAGH;AAAJ,SAAhB;AACAG,QAAAA,SAAS,CAACZ,OAAV,GAAoB,CAAC,GAAGS,KAAK,CAACT,OAAV,CAApB;AACAY,QAAAA,SAAS,CAACP,cAAV,GAA2B,EAAC,GAAGI,KAAK,CAACJ;AAAV,SAA3B;AACAO,QAAAA,SAAS,CAACP,cAAV,CAAyBD,OAAzB,GAAmCM,MAAM,CAACM,IAA1C;AACA,eAAOJ,SAAP;AACH;;AACD,SAAK,aAAL;AAAoB;AAChB,YAAIA,SAAS,GAAG,EAAC,GAAGH;AAAJ,SAAhB;AACAG,QAAAA,SAAS,CAACN,OAAV,GAAoBI,MAAM,CAACJ,OAA3B;AACA,eAAOM,SAAP;AACH;;AACD,SAAK,aAAL;AAAoB;AAChB;AACA,YAAIA,SAAS,GAAG,EAAC,GAAGH;AAAJ,SAAhB;AACAG,QAAAA,SAAS,CAACL,QAAV,GAAqBK,SAAS,CAACN,OAAV,CAAkBW,GAAlB,CAAsBC,CAAC,IAAIA,CAA3B,CAArB;AACA,eAAON,SAAP;AACH;;AACD;AACI,aAAOH,KAAP;AA5BR;AA8BH,CAhCD;;AAiCA,MAAMU,UAAU,GAAIb,OAAD,KAAc;AAACK,EAAAA,IAAI,EAAE,aAAP;AAAsBL,EAAAA,OAAO,EAAEA;AAA/B,CAAd,CAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeE,cAAf","sourcesContent":["import {usersAPI} from \"../ api/api\";\r\nimport {isLoading, setCurrentPage, setUsers} from \"./users-reducer\";\r\n\r\nlet initValue = {\r\n    dialogs: [\r\n        {   id: \"stepa\",\r\n            messages: [\r\n                {name: \"user1\", message: \"sup brah\"},\r\n                {name: \"user1\", message: \"sup brahh\"},\r\n                {name: \"user1\", message: \"sup brahhhh\"},\r\n                {name: \"user1\", message: \"sup brahhhhhhhhh\"}]\r\n        },\r\n    ],\r\n    newMessageText: {name: \"user1\", message: \"shieeeet\"},\r\n    friends: [],\r\n    dialogs2:[],\r\n};\r\nconst messageReducer = (state = initValue, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD-MESSAGE\": {\r\n            let stateCopy = {...state};\r\n            stateCopy.dialogs = [...state.dialogs];\r\n            stateCopy.newMessageText = {...state.newMessageText};\r\n            stateCopy.dialogs[0].messages.push(Object.assign({}, stateCopy.newMessageText));\r\n            stateCopy.newMessageText.message = \"\";\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-MESSAGE\": {\r\n            let stateCopy = {...state};\r\n            stateCopy.dialogs = [...state.dialogs];\r\n            stateCopy.newMessageText = {...state.newMessageText};\r\n            stateCopy.newMessageText.message = action.text;\r\n            return stateCopy;\r\n        }\r\n        case \"SET-FRIENDS\": {\r\n            let stateCopy = {...state};\r\n            stateCopy.friends = action.friends;\r\n            return stateCopy;\r\n        }\r\n        case \"SET-DIALOGS\": {\r\n            debugger\r\n            let stateCopy = {...state};\r\n            stateCopy.dialogs2 = stateCopy.friends.map(f => f);\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst setFriends = (friends) => ({type: \"SET-FRIENDS\", friends: friends});\r\n\r\n// export const getFriendsThunkCreator = () => {\r\n//     return (dispatch) => {\r\n//         usersAPI.getFriends().then(data => {\r\n//             dispatch({type: \"SET-FRIENDS\", friends: data.items});\r\n//             dispatch({type: \"SET-DIALOGS\"});\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport default messageReducer;"]},"metadata":{},"sourceType":"module"}
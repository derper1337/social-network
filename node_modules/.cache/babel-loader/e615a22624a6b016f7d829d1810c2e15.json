{"ast":null,"code":"import { usersAPI, authAPI } from \"../ api/api\";\nlet initValue = {\n  id: null,\n  email: null,\n  login: null,\n  loggedIn: false,\n  errorMessage: null\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET-ERROR-MESSAGE\":\n      {\n        let stateCopy = { ...state,\n          errorMessage: action.errorMessage\n        };\n        return stateCopy;\n      }\n\n    case \"SET-AUTH\":\n      {\n        let stateCopy = { ...state,\n          ...action.loginData,\n          loggedIn: action.loggedIn\n        };\n        return stateCopy;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuth = (loginData, loggedIn) => ({\n  type: \"SET-AUTH\",\n  loginData: loginData,\n  loggedIn: loggedIn\n});\nexport const setError = errorMessage => ({\n  type: \"SET-ERROR-MESSAGE\",\n  errorMessage: errorMessage\n});\nexport const setAuthThunkCreator = () => {\n  return dispatch => {\n    usersAPI.getAuthMe().then(data => {\n      if (data.resultCode === 0) {\n        let loginData = data.data;\n        dispatch(setAuth(loginData, true));\n        dispatch(setError(null));\n      }\n    });\n  };\n};\nexport const loginThunkCreator = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(response => {\n      console.log(response);\n\n      if (response.data.resultCode === 0) {\n        dispatch(setAuthThunkCreator());\n      }\n    });\n  };\n};\nexport const logoutThunkCreator = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        let loginData = {\n          email: null,\n          id: null,\n          login: null\n        };\n        dispatch(setAuth(loginData, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/Philippos/Documents/WebDev/ULTRA_REACT/01/src/Redux/auth-reducer.js"],"names":["usersAPI","authAPI","initValue","id","email","login","loggedIn","errorMessage","authReducer","state","action","type","stateCopy","loginData","setAuth","setError","setAuthThunkCreator","dispatch","getAuthMe","then","data","resultCode","loginThunkCreator","password","rememberMe","response","console","log","logoutThunkCreator","logout"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,OAAlB,QAAgC,aAAhC;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,EAAE,EAAE,IADQ;AAEZC,EAAAA,KAAK,EAAE,IAFK;AAGZC,EAAAA,KAAK,EAAE,IAHK;AAIZC,EAAAA,QAAQ,EAAE,KAJE;AAKZC,EAAAA,YAAY,EAAE;AALF,CAAhB;;AAOA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBP,SAAsB;AAAA,MAAXQ,MAAW;;AAE/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,mBAAL;AAAyB;AACrB,YAAIC,SAAS,GAAG,EACZ,GAAGH,KADS;AAEZF,UAAAA,YAAY,EAAEG,MAAM,CAACH;AAFT,SAAhB;AAIA,eAAOK,SAAP;AACH;;AACD,SAAK,UAAL;AAAiB;AACb,YAAIA,SAAS,GAAG,EACZ,GAAGH,KADS;AAEZ,aAAGC,MAAM,CAACG,SAFE;AAGZP,UAAAA,QAAQ,EAAEI,MAAM,CAACJ;AAHL,SAAhB;AAKA,eAAOM,SAAP;AACH;;AACD;AACI,aAAOH,KAAP;AAjBR;AAmBH,CArBD;;AAsBA,OAAO,MAAMK,OAAO,GAAG,CAACD,SAAD,EAAYP,QAAZ,MAA0B;AAACK,EAAAA,IAAI,EAAE,UAAP;AAAmBE,EAAAA,SAAS,EAAEA,SAA9B;AAAyCP,EAAAA,QAAQ,EAACA;AAAlD,CAA1B,CAAhB;AACP,OAAO,MAAMS,QAAQ,GAAIR,YAAD,KAAmB;AAACI,EAAAA,IAAI,EAAE,mBAAP;AAA4BJ,EAAAA,YAAY,EAACA;AAAzC,CAAnB,CAAjB;AAEP,OAAO,MAAMS,mBAAmB,GAAG,MAAK;AACpC,SAAQC,QAAD,IAAa;AAChBjB,IAAAA,QAAQ,CAACkB,SAAT,GACKC,IADL,CACUC,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,UAAL,KAAoB,CAAxB,EAA2B;AACvB,YAAIR,SAAS,GAAGO,IAAI,CAACA,IAArB;AACAH,QAAAA,QAAQ,CAACH,OAAO,CAACD,SAAD,EAAY,IAAZ,CAAR,CAAR;AACAI,QAAAA,QAAQ,CAACF,QAAQ,CAAC,IAAD,CAAT,CAAR;AACH;AACJ,KAPL;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMO,iBAAiB,GAAG,CAAClB,KAAD,EAAQmB,QAAR,EAAkBC,UAAlB,KAAgC;AAC7D,SAAQP,QAAD,IAAa;AAChBhB,IAAAA,OAAO,CAACI,KAAR,CAAcD,KAAd,EAAqBmB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUM,QAAQ,IAAG;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAIA,QAAQ,CAACL,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/BJ,QAAAA,QAAQ,CAACD,mBAAmB,EAApB,CAAR;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAWP,OAAO,MAAMY,kBAAkB,GAAG,MAAK;AACnC,SAAQX,QAAD,IAAa;AAChBhB,IAAAA,OAAO,CAAC4B,MAAR,GACKV,IADL,CACUM,QAAQ,IAAG;AACb,UAAIA,QAAQ,CAACL,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/B,YAAIR,SAAS,GAAG;AAACT,UAAAA,KAAK,EAAE,IAAR;AAAcD,UAAAA,EAAE,EAAC,IAAjB;AAAuBE,UAAAA,KAAK,EAAC;AAA7B,SAAhB;AACAY,QAAAA,QAAQ,CAACH,OAAO,CAACD,SAAD,EAAY,KAAZ,CAAR,CAAR;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAYP,eAAeL,WAAf","sourcesContent":["import {usersAPI, authAPI} from \"../ api/api\";\r\n\r\nlet initValue = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    loggedIn: false,\r\n    errorMessage: null,\r\n};\r\nconst authReducer = (state = initValue, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-ERROR-MESSAGE\":{\r\n            let stateCopy = {\r\n                ...state,\r\n                errorMessage: action.errorMessage,\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"SET-AUTH\": {\r\n            let stateCopy = {\r\n                ...state,\r\n                ...action.loginData,\r\n                loggedIn: action.loggedIn,\r\n            }\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setAuth = (loginData, loggedIn) => ({type: \"SET-AUTH\", loginData: loginData, loggedIn:loggedIn});\r\nexport const setError = (errorMessage) => ({type: \"SET-ERROR-MESSAGE\", errorMessage:errorMessage});\r\n\r\nexport const setAuthThunkCreator = () =>{\r\n    return (dispatch) =>{\r\n        usersAPI.getAuthMe()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let loginData = data.data;\r\n                    dispatch(setAuth(loginData, true));\r\n                    dispatch(setError(null))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginThunkCreator = (email, password, rememberMe) =>{\r\n    return (dispatch) =>{\r\n        authAPI.login(email, password, rememberMe)\r\n            .then(response =>{\r\n                console.log(response)\r\n                if (response.data.resultCode === 0){\r\n                    dispatch(setAuthThunkCreator());\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const logoutThunkCreator = () =>{\r\n    return (dispatch) =>{\r\n        authAPI.logout()\r\n            .then(response =>{\r\n                if (response.data.resultCode === 0){\r\n                    let loginData = {email: null, id:null, login:null};\r\n                    dispatch(setAuth(loginData, false));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}